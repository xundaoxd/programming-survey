#!/usr/bin/env bash
set -ex

info() {
    echo "[info] " "$@"
}

__func_defered=()
defer() {
    __func_defered+=("$*")
}
do_defer() {
    for ((i=${#__func_defered[@]}-1;i>=0;i--)); do
        if ! eval "${__func_defered[i]}"; then
            echo "eval cmd failed, cmd: \"${__func_defered[i]}\"" >&2
        fi
    done
}
trap do_defer EXIT

opt_agent="Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0"
opt_headers=()
opt_concurrent=1

do_download() {
    local temp="$(mktemp -d)"
    defer "rm -rf ${temp}"
    # local temp="$(pwd)/cache"
    # mkdir -p "${temp}"

    local output="$1"
    local url="$2"
    local url_name="${url##*/}"
    local url_prefix="${url%/*}"

    local -a cmds
    cmds=("curl" "-o" "${temp}/${url_name}" "-A" "${opt_agent}")
    for header in "${opt_headers[@]}"; do
        cmd+=("-H" "${header}")
    done
    cmds+=("${url}")
    "${cmds[@]}"

    # get all frags
    cat "${temp}/${url_name}" \
        | grep -o -E '[0-9a-zA-Z]+\.ts' \
        | sed -E "s|^|${url_prefix}/|" >"${temp}/frags.lst"
    
    cmds=("aria2c"
        "-d" "${temp}"
        "-i" "${temp}/frags.lst"
        "-U" "${opt_agent}"
        "-m" "8"
        "-j" "${opt_concurrent}"
        "-c" "true"
        "--http-accept-gzip" "true"
    )
    for header in "${opt_headers[@]}"; do
        cmds+=("--header=${header}")
    done
    "${cmds[@]}"
    ffmpeg -hide_banner -y -i "${temp}/${url_name}" -c copy "${output}"
}

main() {
    local opt_input=
    local opt_output="output.mp4"
    while (($#)); do
        case $1 in
            -A | --agent)
                opt_agent="$2"
                shift 2
                ;;
            -H | --header)
                opt_headers+=("$2")
                shift 2
                ;;
            -j | --max-concurrent-downloads)
                opt_concurrent="$2"
                shift 2
                ;;
            -o | --output)
                opt_output="$2"
                shift 2
                ;;
            -i)
                opt_input="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done
    if [[ -n "${opt_input}" ]]; then
        cat "${opt_input}" \
            | while read -r line; do
                local -a toks
                IFS=":" read -r -a toks <<<"${line}"
                do_download "${opt_output:-.}/${toks[0]}" "${toks[1]}"
            done
    else
        do_download "${opt_output}" "$@"
    fi
}

main "$@"

