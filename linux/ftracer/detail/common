#!/usr/bin/env bash
# shellcheck disable=SC2155

self_dir=$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)
.   "$self_dir/utils"

tracefs="/sys/kernel/debug/tracing"

# do_event 'kmem:mm_page_alloc' ...
do_event() {
    local e
    for e in "$@"; do
        do_run "echo '$e' >> '$tracefs/set_event'"
        run_atexit "echo '!$e' >> $tracefs/set_event"
    done
}
reset_event() {
    do_run "echo > '$tracefs/set_event'"
}

# do_kprobe 'p:myopen do_sys_open filename=+0(%si):string' ...
do_kprobe() {
    local k
    for k in "$@"; do
        do_run "echo '${k}' >> '$tracefs/kprobe_events'"
        local kprobe
        read -r -a kprobe <<< "$k"
        run_atexit "echo -:${kprobe[0]#*:} >> $tracefs/kprobe_events"
    done
}
reset_kprobe() {
    do_run "echo > '$tracefs/kprobe_events'"
}

# do_kprobe_enabled 'p:name do_sys_open filename=+0(%si):string' 'p:myopen do_sys_open filename=+0(%si):string' ...
do_kprobe_enabled() {
    local k
    for k in "$@"; do
        do_kprobe "$k"
        local kprobe
        read -r -a kprobe <<< "$k"
        do_event "kprobes:${kprobe[0]#*:}"
    done
}

# do_uprobe 'p:bash /bin/bash:0x4245c0' ...
do_uprobe() {
    local u
    for u in "$@"; do
        local uprobe
        read -r -a uprobe <<< "$u"
        if [[ "${uprobe[1]#*:}" != 0x* ]]; then
            local prog="${uprobe[1]%:*}"
            local sym="${uprobe[1]#*:}"
            local addr="$(get_addr "${prog}" "${sym}")"
            uprobe[1]="${prog}:${addr}"
            u=$(join ' ' "${uprobe[@]}")
        fi
        do_run "echo '${u}' >> $tracefs/uprobe_events"
        run_atexit "echo -:${uprobe[0]#*:} >> $tracefs/uprobe_events"
    done
}
reset_uprobe() {
    do_run "echo > '$tracefs/uprobe_events'"
}

# do_uprobe_enabled 'p:asd /bin/bash:0x4245c0' 'p:bash /bin/bash:0x4245c0' ...
do_uprobe_enabled() {
    local u
    for u in "$@"; do
        do_uprobe "$u"
        local uprobe
        read -r -a uprobe <<< "$u"
        do_event "uprobes:${uprobe[0]#*:}"
    done
}

usage() {
    echo 'usage'
}

opt_duration=

opt_kstacktrace=
opt_ustacktrace=

opt_pid=
opt_followfork=
opt_filter=()
opt_trigger=()

opt_tracer=
opt_events=()
opt_uprobes=()
opt_kprobes=()

do_main() {
    if [[ -n "${opt_tracer}" ]]; then
        do_run "echo '$opt_tracer' > '$tracefs/current_tracer'"
        run_atexit "echo nop > $tracefs/current_tracer"
        for f in "${opt_filter[@]}"; do
            local -a tmp
            read -r -a tmp <<< "$f"
            if [ -z "${tmp[*]}" ]; then
                continue
            fi
            if [[ "${tmp[0]}" == "$opt_tracer" ]]; then
                tmp=("${tmp[@]:1}")
                do_run "echo '${tmp[*]}' >> '$tracefs/set_ftrace_filter'"
                run_atexit "echo '!${tmp[*]}' >> $tracefs/set_ftrace_filter"
            fi
        done
        if [[ -n "$opt_pid" ]]; then
            do_run "echo '$opt_pid' > '$tracefs/set_ftrace_pid'"
            run_atexit "echo > $tracefs/set_ftrace_pid"
            if [[ -n "$opt_followfork" ]]; then
                do_run "echo 1 > '$tracefs/options/function-fork'"
                run_atexit "echo 0 > $tracefs/options/function-fork"
            fi
        fi
    fi

    do_kprobe "${opt_kprobes[@]}"
    do_uprobe "${opt_uprobes[@]}"
    do_event "${opt_events[@]}"

    # cannot get userspace sym
    if [[ -n "${opt_ustacktrace}${opt_kstacktrace}" ]]; then
        if [[ -n "${opt_kstacktrace}" ]]; then
            do_run "echo 1 > '$tracefs/options/stacktrace'"
            run_atexit "echo 0 > $tracefs/options/stacktrace"
        fi

        if [[ -n "${opt_ustacktrace}" ]]; then
            do_run "echo 1 > '$tracefs/options/userstacktrace'"
            run_atexit "echo 0 > $tracefs/options/userstacktrace"

            do_run "echo 1 > '$tracefs/options/sym-userobj'"
            run_atexit "echo 0 > $tracefs/options/sym-userobj"
        fi

        do_run "echo 1 > '$tracefs/options/sym-offset'"
        run_atexit "echo 0 > $tracefs/options/sym-offset"

        do_run "echo 1 > '$tracefs/options/sym-addr'"
        run_atexit "echo 0 > $tracefs/options/sym-addr"
    fi

    if [[ -n "$opt_pid" ]]; then
        do_run "echo '$opt_pid' > '$tracefs/set_event_pid'"
        run_atexit "echo > $tracefs/set_event_pid"
        if [[ -n "$opt_followfork" ]]; then
            do_run "echo 1 > '$tracefs/options/event-fork'"
            run_atexit "echo 0 > $tracefs/options/event-fork"
        fi
    fi

    for f in "${opt_filter[@]}"; do
        local -a tmp
        read -r -a tmp <<< "$f"
        if [ -z "${tmp[*]}" ]; then
            continue
        fi
        local e="${tmp[0]}"
        local filter="$(join ' ' "${tmp[@]:1}")"
        local epath="$tracefs/events/${e//://}"

        if [ -e "${epath}/filter" ]; then
            echo "apply event filter: '${f}'"
            do_run "echo '${filter}' > '$epath/filter'"
            run_atexit "echo 0 > $epath/filter"
        fi
    done

    for t in "${opt_trigger[@]}"; do
        local -a tmp
        read -r -a tmp <<< "$t"
        if [ -z "${tmp[*]}" ]; then
            continue
        fi
        local e="${tmp[0]}"
        local trigger="$(join ' ' "${tmp[@]:1}")"
        local epath="$tracefs/events/${e//://}"

        if [ -e "${epath}/trigger" ]; then
            echo "apply event trigger: '${t}'"
            do_run "echo '${trigger}' > '$epath/trigger'"
            run_atexit "echo '!${trigger}' > $epath/trigger"
        fi
    done
}

main() {
    while (( $# )); do
        case "$1" in
            -h | --help)
                usage
                exit
                ;;
            -d | --duration)
                opt_duration="$2"
                shift 2
                ;;
            -us | --ustacktrace)
                opt_ustacktrace=1
                shift
                ;;
            -ks | --kstacktrace)
                opt_kstacktrace=1
                shift
                ;;
            -p | --pid)
                opt_pid="$2"
                shift 2
                ;;
            --follow-fork)
                opt_followfork=1
                shift
                ;;
            --filter)
                opt_filter+=("$2")
                shift 2
                ;;
            --trigger)
                opt_trigger+=("$2")
                shift 2
                ;;
            --tracer)
                opt_tracer="$2"
                shift 2
                ;;
            --uprobe)
                opt_uprobes+=("$2")
                shift 2
                ;;
            --kprobe)
                opt_kprobes+=("$2")
                shift 2
                ;;
            --event)
                opt_events+=("$2")
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done

    do_main

    do_run "echo 1 > '$tracefs/tracing_on'"
    run_atexit "echo 0 > $tracefs/tracing_on"

    if [ -n "$opt_duration" ]; then
        run_atexit "cat $tracefs/trace"
        sleep "$opt_duration"
    else
        cat "$tracefs/trace_pipe"
    fi
}

