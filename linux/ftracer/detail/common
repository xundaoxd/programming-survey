#!/usr/bin/env bash
# shellcheck disable=SC2155

self_dir=$(cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)
.   "$self_dir/utils"

tracefs="/sys/kernel/debug/tracing"

# do_event 'kmem:mm_page_alloc' ...
do_event() {
    local e
    for e in "$@"; do
        do_run "echo '$e' >> '$tracefs/set_event'"
        run_atexit "echo '!$e' >> $tracefs/set_event"
    done
}
reset_event() {
    do_run "echo > '$tracefs/set_event'"
}

# do_kprobe 'p:myopen do_sys_open filename=+0(%si):string' ...
do_kprobe() {
    local k
    for k in "$@"; do
        do_run "echo '${k}' >> '$tracefs/kprobe_events'"
        local kprobe
        read -r -a kprobe <<< "$k"
        run_atexit "echo -:${kprobe[0]#*:} >> $tracefs/kprobe_events"
    done
}
reset_kprobe() {
    do_run "echo > '$tracefs/kprobe_events'"
}

# do_kprobe_enabled 'p:name do_sys_open filename=+0(%si):string' 'p:myopen do_sys_open filename=+0(%si):string' ...
do_kprobe_enabled() {
    local k
    for k in "$@"; do
        do_kprobe "$k"
        local kprobe
        read -r -a kprobe <<< "$k"
        do_event "kprobes:${kprobe[0]#*:}"
    done
}

# do_uprobe 'p:bash /bin/bash:0x4245c0' ...
do_uprobe() {
    local u
    for u in "$@"; do
        local uprobe
        read -r -a uprobe <<< "$u"
        if [[ "${uprobe[1]#*:}" != 0x* ]]; then
            local prog="${uprobe[1]%:*}"
            local sym="${uprobe[1]#*:}"
            local addr="$(get_addr "${prog}" "${sym}")"
            uprobe[1]="${prog}:${addr}"
            u=$(join ' ' "${uprobe[@]}")
        fi
        do_run "echo '${u}' >> $tracefs/uprobe_events"
        run_atexit "echo -:${uprobe[0]#*:} >> $tracefs/uprobe_events"
    done
}
reset_uprobe() {
    do_run "echo > '$tracefs/uprobe_events'"
}

# do_uprobe_enabled 'p:asd /bin/bash:0x4245c0' 'p:bash /bin/bash:0x4245c0' ...
do_uprobe_enabled() {
    local u
    for u in "$@"; do
        do_uprobe "$u"
        local uprobe
        read -r -a uprobe <<< "$u"
        do_event "uprobes:${uprobe[0]#*:}"
    done
}

usage() {
    echo "usage ftracer [-ls-event] [-ls-filter] [-ls-tracer] [-d duration]"
    echo "              [-h|--help]"
    echo "              [--tracer t]"
    echo "              [--kprobe k]"
    echo "              [--uprobe u]"
    echo "              [--event e]"
    echo "              [--filter f]"
    echo "              [--trigger t]"
}

opt_duration=

# target
opt_tracer=
opt_events=()
opt_uprobes=()
opt_kprobes=()

# filter
opt_filter=()

# action
opt_trigger=()

do_filter() {
    # setup filter
    for f in "${opt_filter[@]}"; do
        if [[ -z "$f" ]]; then
            continue
        fi
        local -a tmp
        read -r -a tmp <<< "$f"
        local target="${tmp[0]}"
        tmp=("${tmp[@]:1}")
        if [[ $target == "${opt_tracer}" ]]; then
            do_run "echo ${tmp[*]} >> $tracefs/set_ftrace_filter"
            run_atexit "echo !${tmp[*]} >> $tracefs/set_ftrace_filter"
        elif [[ ${opt_events[*]} == *${target}* && -d $tracefs/events/${target//://} ]]; then
            local epath="${target//://}"
            do_run "echo ${tmp[*]} > $tracefs/events/${epath}/filter"
            run_atexit "echo 0 > $tracefs/events/${epath}/filter"
        fi
    done
}

do_trigger() {
    # setup trigger
    for f in "${opt_trigger[@]}"; do
        if [[ -z "$f" ]]; then
            continue
        fi
        local -a tmp
        read -r -a tmp <<< "$f"
        local target="${tmp[0]}"
        tmp=("${tmp[@]:1}")
        if [[ ${opt_events[*]} == *${target}* && -d $tracefs/events/${target//://} ]]; then
            local epath="${target//://}"
            do_run "echo ${tmp[*]} > $tracefs/events/${epath}/trigger"
            run_atexit "echo !${tmp[*]} > $tracefs/events/${epath}/trigger"
        fi
    done
}

do_main() {

    do_kprobe "${opt_kprobes[@]}"
    do_uprobe "${opt_uprobes[@]}"

    do_filter
    do_trigger

    do_event "${opt_events[@]}"
    if [[ -n "${opt_tracer}" ]]; then
        do_run "echo '$opt_tracer' > '$tracefs/current_tracer'"
        run_atexit "echo nop > $tracefs/current_tracer"
    fi

    do_run "echo 1 > '$tracefs/tracing_on'"
    if [ -n "$opt_duration" ]; then
        run_atexit "cat $tracefs/trace"
        sleep "$opt_duration"
        echo 0 > $tracefs/tracing_on
    else
        run_atexit "echo 0 > $tracefs/tracing_on"
        cat "$tracefs/trace_pipe"
    fi
}

main() {
    while (( $# )); do
        case "$1" in
            -ls-event)
                cat $tracefs/available_events
                shift
                exit
                ;;
            -ls-filter)
                cat $tracefs/available_filter_functions
                shift
                exit
                ;;
            -ls-tracer)
                cat $tracefs/available_tracers
                shift
                exit
                ;;
            -h | --help)
                usage "$@"
                shift
                exit
                ;;
            -d | --duration)
                opt_duration="$2"
                shift 2
                ;;
            --tracer)
                opt_tracer="$2"
                shift 2
                ;;
            --uprobe)
                opt_uprobes+=("$2")
                shift 2
                ;;
            --kprobe)
                opt_kprobes+=("$2")
                shift 2
                ;;
            --event)
                opt_events+=("$2")
                shift 2
                ;;
            --filter)
                opt_filter+=("$2")
                shift 2
                ;;
            --trigger)
                opt_trigger+=("$2")
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done
    do_main "$@"
}

