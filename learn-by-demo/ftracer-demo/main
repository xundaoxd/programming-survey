#!/usr/bin/env bash
set -ex

info() {
    echo "[info]" "$@"
}

err() {
    echo "[error]" "$@" 2>&1
}

die() {
    local code="$1"
    shift

    err "$@"
    exit "${code}"
}

__func_defered=()
do_defer() {
    for ((i=${#__func_defered[@]}-1;i>=0;i--)); do
        if ! eval "${__func_defered[i]}"; then
            die 1 "eval cmd failed, cmd: \"${__func_defered[i]}\""
        fi
    done
}
trap do_defer EXIT
defer() {
    __func_defered+=("$*")
}

opt_tracefs="/sys/kernel/tracing"
opt_pid=()

do_kprobe() {
    # p:myprobe do_sys_open dfd=%ax filename=%dx flags=%cx mode=+4($stack)
    local kprobe="$1"
    local pname="${kprobe%% *}"
    pname="${pname#p:}"
    pname="${pname#r:}"

    echo "${kprobe}" >> "${opt_tracefs}/kprobe_events"
    defer "echo '-:${pname}' >> '${opt_tracefs}/kprobe_events'"
}

do_trigger() {
    # kmem:kmalloc-stacktrace
    local -a toks
    IFS='-' read -r -a toks <<<"${1}"

    local event="${toks[0]}"
    local trigger="${toks[1]}"
    echo "${trigger}" > "${opt_tracefs}/events/${event//://}/trigger"
    defer "echo '!${trigger}' > '${opt_tracefs}/events/${event//://}/trigger'"
}

do_event() {
    # sched:sched_process_exec
    local event="$1"

    echo "${event}" >> "${opt_tracefs}/set_event"
    defer "echo '!${event}' >> '${opt_tracefs}/set_event'"
}

# ./main \
#   -e sched:sched_process_exec -e sched:sched_process_exit -e sched:sched_process_free \
#   --kprobe 'p:nvgpu_timeout nvgpu_timeout_expired_msg_cpu' --tigger 'kprobes:nvgpu_timeout-stacktrace' -e 'kprobes:nvgpu_timeout' \
#   --kprobe 'p:nvgpu_unbind_channel nvgpu_tsg_unbind_channel' --tigger 'kprobes:nvgpu_unbind_channel-stacktrace' -e 'kprobes:nvgpu_unbind_channel' \
main() {
    while (($#)); do
        case "$1" in
            --tracefs)
                opt_tracefs="$2"
                shift 2
                ;;
            --kprobe)
                do_kprobe "$2"
                shift 2
                ;;
            --trigger)
                do_trigger "$2"
                shift 2
                ;;
            -p | --pid)
                opt_pid+=("$2")
                shift 2
                ;;
            -e | --event)
                do_event "$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done

    if [ -n "${opt_pid}" ]; then
        echo "${opt_pid[*]}" >"${opt_tracefs}/set_event_pid"
        defer "echo >'${opt_tracefs}/set_event_pid'"
        echo 1 >"${opt_tracefs}/options/event-fork"
        defer "echo 0>'${opt_tracefs}/options/event-fork'"

        echo "${opt_pid[*]}" >"${opt_tracefs}/set_ftrace_pid"
        defer "echo >'${opt_tracefs}/set_ftrace_pid'"
        echo 1 >"${opt_tracefs}/options/function-fork"
        defer "echo 0>'${opt_tracefs}/options/function-fork'"
    fi

    echo 1 > "${opt_tracefs}/tracing_on"
    defer "echo 0 > ${opt_tracefs}/tracing_on"
    cat "${opt_tracefs}/trace_pipe"
}

main "$@"

